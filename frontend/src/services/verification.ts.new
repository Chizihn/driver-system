import api from "@/lib/axios";
import type {
  VerificationLog,
  ApiResponse,
  DashboardStats,
  Driver,
  Document
} from "@/types";

export interface VerificationResult {
  valid: boolean;
  error?: string;
  driver?: Driver;
  document?: Document;
  verification?: {
    id: string;
    result: 'VALID' | 'INVALID' | 'EXPIRED' | 'FORGED';
    timestamp: string;
  };
}

export const verificationService = {
  verifyByQRCode: async (qrCodeData: string, location = '', notes = ''): Promise<VerificationResult> => {
    const response = await api.post<ApiResponse<VerificationResult>>(
      "/verify/qrcode", 
      { qrCodeData, location, notes }
    );
    return response.data.data!;
  },

  verifyByDocumentNumber: async (documentNumber: string, location = '', notes = ''): Promise<VerificationResult> => {
    const response = await api.post<ApiResponse<VerificationResult>>(
      "/verify/document", 
      { documentNumber, location, notes }
    );
    return response.data.data!;
  },

  getVerificationHistory: async (limit = 50) => {
    const response = await api.get<ApiResponse<VerificationLog[]>>(
      "/verifications/history", 
      { params: { limit } }
    );
    return response.data.data!;
  },

  getDriverVerificationHistory: async (driverId: string) => {
    const response = await api.get<ApiResponse<VerificationLog[]>>(
      `/verifications/driver/${driverId}`
    );
    return response.data.data!;
  },

  getOfficerStats: async (days = 30) => {
    const response = await api.get<ApiResponse<DashboardStats>>(
      "/verifications/stats/officer", 
      { params: { days } }
    );
    return response.data.data!;
  },

  getSystemStats: async (days = 30) => {
    const response = await api.get<ApiResponse<DashboardStats>>(
      "/verifications/stats/system", 
      { params: { days } }
    );
    return response.data.data!;
  },

  logVerification: async (data: {
    driverId: string;
    documentId: string;
    result: string;
    notes?: string;
    location?: string;
  }) => {
    const response = await api.post<ApiResponse<VerificationLog>>(
      "/verifications/log", 
      data
    );
    return response.data.data!;
  }
};

export const dashboardService = {
  getDashboard: async () => {
    const response = await api.get<ApiResponse<DashboardStats>>("/dashboard");
    return response.data.data!;
  },
};
